/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Stopwatch } from "./Stopwatch";
import { StopwatchCountArgs } from "./StopwatchCountArgs";
import { StopwatchFindManyArgs } from "./StopwatchFindManyArgs";
import { StopwatchFindUniqueArgs } from "./StopwatchFindUniqueArgs";
import { CreateStopwatchArgs } from "./CreateStopwatchArgs";
import { UpdateStopwatchArgs } from "./UpdateStopwatchArgs";
import { DeleteStopwatchArgs } from "./DeleteStopwatchArgs";
import { LapFindManyArgs } from "../../lap/base/LapFindManyArgs";
import { Lap } from "../../lap/base/Lap";
import { StopwatchService } from "../stopwatch.service";
@graphql.Resolver(() => Stopwatch)
export class StopwatchResolverBase {
  constructor(protected readonly service: StopwatchService) {}

  async _stopwatchesMeta(
    @graphql.Args() args: StopwatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Stopwatch])
  async stopwatches(
    @graphql.Args() args: StopwatchFindManyArgs
  ): Promise<Stopwatch[]> {
    return this.service.stopwatches(args);
  }

  @graphql.Query(() => Stopwatch, { nullable: true })
  async stopwatch(
    @graphql.Args() args: StopwatchFindUniqueArgs
  ): Promise<Stopwatch | null> {
    const result = await this.service.stopwatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Stopwatch)
  async createStopwatch(
    @graphql.Args() args: CreateStopwatchArgs
  ): Promise<Stopwatch> {
    return await this.service.createStopwatch({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Stopwatch)
  async updateStopwatch(
    @graphql.Args() args: UpdateStopwatchArgs
  ): Promise<Stopwatch | null> {
    try {
      return await this.service.updateStopwatch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Stopwatch)
  async deleteStopwatch(
    @graphql.Args() args: DeleteStopwatchArgs
  ): Promise<Stopwatch | null> {
    try {
      return await this.service.deleteStopwatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Lap], { name: "laps" })
  async findLaps(
    @graphql.Parent() parent: Stopwatch,
    @graphql.Args() args: LapFindManyArgs
  ): Promise<Lap[]> {
    const results = await this.service.findLaps(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
