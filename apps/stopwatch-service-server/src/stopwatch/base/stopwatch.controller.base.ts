/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StopwatchService } from "../stopwatch.service";
import { StopwatchCreateInput } from "./StopwatchCreateInput";
import { Stopwatch } from "./Stopwatch";
import { StopwatchFindManyArgs } from "./StopwatchFindManyArgs";
import { StopwatchWhereUniqueInput } from "./StopwatchWhereUniqueInput";
import { StopwatchUpdateInput } from "./StopwatchUpdateInput";
import { LapFindManyArgs } from "../../lap/base/LapFindManyArgs";
import { Lap } from "../../lap/base/Lap";
import { LapWhereUniqueInput } from "../../lap/base/LapWhereUniqueInput";

export class StopwatchControllerBase {
  constructor(protected readonly service: StopwatchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Stopwatch })
  async createStopwatch(
    @common.Body() data: StopwatchCreateInput
  ): Promise<Stopwatch> {
    return await this.service.createStopwatch({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        endTime: true,
        startTime: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Stopwatch] })
  @ApiNestedQuery(StopwatchFindManyArgs)
  async stopwatches(@common.Req() request: Request): Promise<Stopwatch[]> {
    const args = plainToClass(StopwatchFindManyArgs, request.query);
    return this.service.stopwatches({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        endTime: true,
        startTime: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Stopwatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stopwatch(
    @common.Param() params: StopwatchWhereUniqueInput
  ): Promise<Stopwatch | null> {
    const result = await this.service.stopwatch({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        endTime: true,
        startTime: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Stopwatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStopwatch(
    @common.Param() params: StopwatchWhereUniqueInput,
    @common.Body() data: StopwatchUpdateInput
  ): Promise<Stopwatch | null> {
    try {
      return await this.service.updateStopwatch({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          endTime: true,
          startTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Stopwatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStopwatch(
    @common.Param() params: StopwatchWhereUniqueInput
  ): Promise<Stopwatch | null> {
    try {
      return await this.service.deleteStopwatch({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          endTime: true,
          startTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/laps")
  @ApiNestedQuery(LapFindManyArgs)
  async findLaps(
    @common.Req() request: Request,
    @common.Param() params: StopwatchWhereUniqueInput
  ): Promise<Lap[]> {
    const query = plainToClass(LapFindManyArgs, request.query);
    const results = await this.service.findLaps(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        lapTime: true,
        lapNumber: true,

        stopwatch: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/laps")
  async connectLaps(
    @common.Param() params: StopwatchWhereUniqueInput,
    @common.Body() body: LapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      laps: {
        connect: body,
      },
    };
    await this.service.updateStopwatch({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/laps")
  async updateLaps(
    @common.Param() params: StopwatchWhereUniqueInput,
    @common.Body() body: LapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      laps: {
        set: body,
      },
    };
    await this.service.updateStopwatch({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/laps")
  async disconnectLaps(
    @common.Param() params: StopwatchWhereUniqueInput,
    @common.Body() body: LapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      laps: {
        disconnect: body,
      },
    };
    await this.service.updateStopwatch({
      where: params,
      data,
      select: { id: true },
    });
  }
}
