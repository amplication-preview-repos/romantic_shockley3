/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Stopwatch as PrismaStopwatch,
  Lap as PrismaLap,
} from "@prisma/client";

export class StopwatchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StopwatchCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stopwatch.count(args);
  }

  async stopwatches(
    args: Prisma.StopwatchFindManyArgs
  ): Promise<PrismaStopwatch[]> {
    return this.prisma.stopwatch.findMany(args);
  }
  async stopwatch(
    args: Prisma.StopwatchFindUniqueArgs
  ): Promise<PrismaStopwatch | null> {
    return this.prisma.stopwatch.findUnique(args);
  }
  async createStopwatch(
    args: Prisma.StopwatchCreateArgs
  ): Promise<PrismaStopwatch> {
    return this.prisma.stopwatch.create(args);
  }
  async updateStopwatch(
    args: Prisma.StopwatchUpdateArgs
  ): Promise<PrismaStopwatch> {
    return this.prisma.stopwatch.update(args);
  }
  async deleteStopwatch(
    args: Prisma.StopwatchDeleteArgs
  ): Promise<PrismaStopwatch> {
    return this.prisma.stopwatch.delete(args);
  }

  async findLaps(
    parentId: string,
    args: Prisma.LapFindManyArgs
  ): Promise<PrismaLap[]> {
    return this.prisma.stopwatch
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .laps(args);
  }
}
