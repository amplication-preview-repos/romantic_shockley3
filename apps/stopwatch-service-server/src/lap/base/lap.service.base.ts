/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Lap as PrismaLap,
  Stopwatch as PrismaStopwatch,
} from "@prisma/client";

export class LapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LapCountArgs, "select">): Promise<number> {
    return this.prisma.lap.count(args);
  }

  async laps(args: Prisma.LapFindManyArgs): Promise<PrismaLap[]> {
    return this.prisma.lap.findMany(args);
  }
  async lap(args: Prisma.LapFindUniqueArgs): Promise<PrismaLap | null> {
    return this.prisma.lap.findUnique(args);
  }
  async createLap(args: Prisma.LapCreateArgs): Promise<PrismaLap> {
    return this.prisma.lap.create(args);
  }
  async updateLap(args: Prisma.LapUpdateArgs): Promise<PrismaLap> {
    return this.prisma.lap.update(args);
  }
  async deleteLap(args: Prisma.LapDeleteArgs): Promise<PrismaLap> {
    return this.prisma.lap.delete(args);
  }

  async getStopwatch(parentId: string): Promise<PrismaStopwatch | null> {
    return this.prisma.lap
      .findUnique({
        where: { id: parentId },
      })
      .stopwatch();
  }
}
