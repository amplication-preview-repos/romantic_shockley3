/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lap } from "./Lap";
import { LapCountArgs } from "./LapCountArgs";
import { LapFindManyArgs } from "./LapFindManyArgs";
import { LapFindUniqueArgs } from "./LapFindUniqueArgs";
import { CreateLapArgs } from "./CreateLapArgs";
import { UpdateLapArgs } from "./UpdateLapArgs";
import { DeleteLapArgs } from "./DeleteLapArgs";
import { Stopwatch } from "../../stopwatch/base/Stopwatch";
import { LapService } from "../lap.service";
@graphql.Resolver(() => Lap)
export class LapResolverBase {
  constructor(protected readonly service: LapService) {}

  async _lapsMeta(
    @graphql.Args() args: LapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lap])
  async laps(@graphql.Args() args: LapFindManyArgs): Promise<Lap[]> {
    return this.service.laps(args);
  }

  @graphql.Query(() => Lap, { nullable: true })
  async lap(@graphql.Args() args: LapFindUniqueArgs): Promise<Lap | null> {
    const result = await this.service.lap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lap)
  async createLap(@graphql.Args() args: CreateLapArgs): Promise<Lap> {
    return await this.service.createLap({
      ...args,
      data: {
        ...args.data,

        stopwatch: args.data.stopwatch
          ? {
              connect: args.data.stopwatch,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lap)
  async updateLap(@graphql.Args() args: UpdateLapArgs): Promise<Lap | null> {
    try {
      return await this.service.updateLap({
        ...args,
        data: {
          ...args.data,

          stopwatch: args.data.stopwatch
            ? {
                connect: args.data.stopwatch,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lap)
  async deleteLap(@graphql.Args() args: DeleteLapArgs): Promise<Lap | null> {
    try {
      return await this.service.deleteLap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Stopwatch, {
    nullable: true,
    name: "stopwatch",
  })
  async getStopwatch(@graphql.Parent() parent: Lap): Promise<Stopwatch | null> {
    const result = await this.service.getStopwatch(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
