/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LapService } from "../lap.service";
import { LapCreateInput } from "./LapCreateInput";
import { Lap } from "./Lap";
import { LapFindManyArgs } from "./LapFindManyArgs";
import { LapWhereUniqueInput } from "./LapWhereUniqueInput";
import { LapUpdateInput } from "./LapUpdateInput";

export class LapControllerBase {
  constructor(protected readonly service: LapService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lap })
  async createLap(@common.Body() data: LapCreateInput): Promise<Lap> {
    return await this.service.createLap({
      data: {
        ...data,

        stopwatch: data.stopwatch
          ? {
              connect: data.stopwatch,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        lapTime: true,
        lapNumber: true,

        stopwatch: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lap] })
  @ApiNestedQuery(LapFindManyArgs)
  async laps(@common.Req() request: Request): Promise<Lap[]> {
    const args = plainToClass(LapFindManyArgs, request.query);
    return this.service.laps({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        lapTime: true,
        lapNumber: true,

        stopwatch: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lap(@common.Param() params: LapWhereUniqueInput): Promise<Lap | null> {
    const result = await this.service.lap({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        lapTime: true,
        lapNumber: true,

        stopwatch: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLap(
    @common.Param() params: LapWhereUniqueInput,
    @common.Body() data: LapUpdateInput
  ): Promise<Lap | null> {
    try {
      return await this.service.updateLap({
        where: params,
        data: {
          ...data,

          stopwatch: data.stopwatch
            ? {
                connect: data.stopwatch,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          lapTime: true,
          lapNumber: true,

          stopwatch: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLap(
    @common.Param() params: LapWhereUniqueInput
  ): Promise<Lap | null> {
    try {
      return await this.service.deleteLap({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          lapTime: true,
          lapNumber: true,

          stopwatch: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
